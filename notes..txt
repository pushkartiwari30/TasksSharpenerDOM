#First i need to install all the necessary pakages then ill create a srver. Since creating a seeer using sequelize will need seqelze, mysql2 package. 

#Refer to the expressjs tasks and also the task 18 project

//TO CREATE A SERVER 
const express = require('express');
const app = express();
app.get('/get-expense', (req, res, next) => {
    try {
        console.log(req)
    } catch (err) {
        console.log(err);
        res.status(500).json({
            error: err
        })
    }
})
app.listen(3000); 

# Chnage the get to post method and when the submit is click in the front end. Go to front end code an dmake required chnage sto send data. to baclend . 
# For server to accept req from difffernt location i need to have cors npm
# The req.body will print undefined so we will use body-parser. 
# Sequelie fincionlity is to be createed in a new folder util in database.js file
Check the database file to see how to setup sequelize for a datbase. This code will connect this app with mysql databse using sequelize. import this database file exports into app js file . 
# Now we need to setup a format for the tables to a database so we wil setup a models file and in the app.js file we will use sync method of  sequelize (in app.js) to sync the models with the datbase. and import this modelinto app.js. Set the id to unique since we will use ut to find the row to b edited or deleted.  Also wriet the synce code at the bottom of tht app js file. As soon as i paste the sync code the sql query is run and the table based on model defined is created in thr bacend 
# Now wee need to make an instance of the 'Expense' so that the data goes into the table. We capture all the data given by front end into varables and then create instance of Expense (refer code). We send the sequelize query to create the row with given data. Also send the response back
# Now when we make a post request by click on submit button in UI, the data is stored in the table. (If this does not work then drop the table and just ctrl+s to restart the server aand table will be created and then do a post req. now the data should ahve been sent.)

//Adding get functionlity. 
# Go to appjs file setup contoller logic. Not everything but just a cosole statent to check if the req is cming or not. 
# go to front end and set up the get request sending code after that combe back here 
# Do a page refresh of UI and see if the get requets works
# If it works then we need to get all thet data stored in the table and send that data to the front end in the response. Refer the code to how to get data. send the resposne. 
# Now go to front end and see if getting correct reponse and display the data in the UI using front end code. 


//Adding delete functionlity. 
# Simliar steps like above . just we need to get the id in the request from the front end to know which row to delete. 
Make sure whle sending the expense id (from front end )the format is a json objcte othersiwe req.body will not have anything .
# After getting the id we will perofrm query to elete that row. and send a success response. 
 


// Adding edit functionality 
same for edit 

***************************************************************************************************
Routing and Contoller Loggic Splitting
//Routing
1. Create a "routes" folder and then create four files inside it, namely "delete-expense", "get-expense", "add-expense", and "edit-expense".
2. Set up each routing file. I will provide instructions for just the "add-expense" file.
3. Go to the "add-expense" routes file and import the Express module. Import the Router function of Express as well. All request-response handling will be done inside the router.get or router.post functions, similar to the previous version. Refer to the code for better understanding.
   Cut the request/response handling logic from the app.js file and paste it in the "add-expense" routes file, removing it from ".post" to the end. Then, export this logic.
4. Now, return to the app.js file and import what we exported in the "add-expense" routes file. Use the require keyword to import the data from the router file and store it in a variable.
   Add ".use" to the app (at the place where we cut the code) and pass that variable in the app.use middleware.
5. Similarly, do this for the other two routes.
6. We will encounter some errors since everything is not imported yet. For example:
   const User = require('./models/user'); Use two dots to import since the models folder is two levels up from the routing files.

Import the above in all three routing files.

// CLEANING THE CODE BY SPLITTING THE CONTROLLER LOGIC.
I will create only one controller logic file for now.
1. Create a file named "expenses.js" inside the controllers folder.
2. Cut the callback function of router.post from the "add-expense" routes file and paste it inside the "expense" file in the controllers folder.
3. Assign that callback to a variable, for example: exports.postAddExpense = cb()...
4. Import this into the "add-expense" router file using the require keyword and importing the file. Give it a variable name, and call the .postAddUser on this variable in the router.post middleware.
   So basically, the callback is replaced by "controllername.variable.postAddExpense".
   Similarly, do this for all the three routes.
5. We will get some errors since everything is not imported yet. For example:
   const Expense = require('../models/expense'); Use two dots to import since the models folder is two levels up from the routing files.

Import the above in all three routing files.



